#!/usr/bin/env python3
import sys
import os

script_dir = os.path.dirname(os.path.abspath(__file__))
src_dir = os.path.dirname(script_dir)
repo_dir = os.path.dirname(src_dir)
sys.path.insert(0, os.path.join(repo_dir))

import tokens

def main(cmd_args):
    if len(cmd_args) == 0:
        tokens_txt = os.path.join(repo_dir, "tokens.txt")
        tokens_hdr = "/tmp/tokens.h"
        tokens_src = "/tmp/tokens.c"
    elif len(cmd_args) == 3:
        tokens_txt = cmd_args[0]
        tokens_hdr = cmd_args[1]
        tokens_src = cmd_args[2]
    else:
        sys.exit("Usage: generate-tokens-c [TOKENS_TXT TOKENS_HDR TOKENS_C]")

    print("TOKENS_TXT: {}".format(tokens_txt))
    print("TOKENS_HDR: {}".format(tokens_hdr))
    print("TOKENS_SRC: {}".format(tokens_src))

    patterns = []
    with open(tokens_txt, "rb") as tokens_file:
        for line in tokens_file:
            name, pattern = tokens.parseLine(line)
            #print("{:20} {}".format(name, pattern))
            patterns.append((name.decode('ascii'), pattern.decode('ascii')))

    with open(tokens_hdr, "w") as out:
        out.write("#define TOKEN_COUNT {}\n".format(len(patterns)))
        out.write("enum token_kind {\n")
        for name, pattern in patterns:
            out.write("    TOKEN_KIND_{},\n".format(name))
        out.write("};\n")
        out.write("extern const char *token_name_table[];\n")
        out.write("extern const char *token_pattern_table[];\n")

    with open(tokens_src, "w") as out:
        out.write("const char *token_name_table[] = {\n")
        for name, pattern in patterns:
            out.write("    \"{}\",\n".format(name))
        out.write("};\n")
        out.write("const char *token_pattern_table[] = {\n")
        for name, pattern in patterns:
            parts = pattern.split("\\")
            new_parts = [parts[0]]

            KNOWN_C_ESCAPES = "nt"
            KNOWN_REGEX_ESCAPES = ".$)(|"

            for part in parts[1:]:
                if len(part) == 0 or part[0] in KNOWN_C_ESCAPES:
                    new_parts.append(part)
                elif part[0] in KNOWN_REGEX_ESCAPES:
                    new_parts.append("\\" + part)
                else:
                    sys.exit("is \\{} (ascii=0x{:02X}) a REGEX escape or a C escape? (from pattern {})".format(part[0], ord(part[0]), pattern))

            out.write("    \"{}\",\n".format("\\".join(new_parts).replace('"', '\\"')))
        out.write("};\n")

main(sys.argv[1:])
