#!/usr/bin/env python3
import sys
import os
import subprocess
import inspect

import prototype

def testSemanticError(line, msg):
    lineno = inspect.getframeinfo(inspect.stack()[1][0]).lineno

    context = prototype.Context(__file__)
    result = prototype.runLine(context, line, print_trace=False, capture_stdout=True)
    if type(result) != prototype.SemanticError:
        sys.exit("{}({}): Error: expected a SemanticError but got {}".format(__file__, lineno, result))

    if result.msg != msg:
        print("{}({}): Error: semantic error message does not match expected:".format(__file__, lineno))
        print("expected: {}".format(msg))
        print("actual  : {}".format(result.msg))
        sys.exit(1)

    print("test: got expected semantic error from '{}': {}".format(line, msg))

def testRunError(line, stderr):
    lineno = inspect.getframeinfo(inspect.stack()[1][0]).lineno

    context = prototype.Context(__file__)
    result = prototype.runLine(context, line, print_trace=False, capture_stdout=True)
    if type(result) != prototype.CommandResult:
        sys.exit("{}({}): Error: expected a CommandResult but got {}".format(__file__, lineno, result))

    if result.exitcode == 0:
        sys.exit("{}({}): Error: expected line to fail but it passed: '{}'".format(line))

    if len(result.stdout) > 0:
        sys.exit("{}({}): this code that failed unexpectedly printed to stdout: {}".format(result.stdout))

    print("TODO: verify stderr!!!!")
    #    print("{}({}): Error: semantic error message does not match expected:".format(__file__, lineno))
    #    print("expected: {}".format(msg))
    #    print("actual  : {}".format(result.msg))
    #    sys.exit(1)

    print("test: got expected run error from '{}': {}".format(line, stderr))

def testExpression(line, expected):
    lineno = inspect.getframeinfo(inspect.stack()[1][0]).lineno

    context = prototype.Context(__file__)
    result = prototype.runLine(context, line, print_trace=False, capture_stdout=True)
    if type(result) != prototype.TestResult:
        sys.exit("{}({}): Error: expected a TestResult but got {}".format(__file__, lineno, result))

    if result.value != expected:
        sys.exit("{}({}): Error: expected line return {} but returned {}: '{}'".format(
            __file__, lineno, expected, result.value, line))


def runStitchTests():
    script_dir = os.path.dirname(__file__)
    print("test: running stitch-tests...")
    result = subprocess.run([os.path.join(script_dir, "stitch"), "stitch-tests"])
    if result.returncode != 0:
        sys.exit(result.returncode)

def main():
    testSemanticError("$and", "missing operand before '$and'")
    testSemanticError("$or", "missing operand before '$or'")
    testSemanticError("false $and", "'$and' expects a TestResult but got token 'false'")
    testSemanticError("(false) $and", "missing operand after '$and'")
    testSemanticError("false false $or", "command operands to '$or' must be wrapped with (...)")
    testSemanticError("(false) $or", "missing operand after '$or'")
    testSemanticError("($multiline false) $or", "the $multiline builtin is only supported inside a command-substitution")
    testSemanticError("($and) $or", "missing operand before '$and'")
    testSemanticError("(false) $and", "missing operand after '$and'")
    testSemanticError("false false $and", "command operands to '$and' must be wrapped with (...)")
    testSemanticError("false $and false false", "'$and' expects a TestResult but got token 'false'")
    testSemanticError("(false) $and false false", "'$and' expects a TestResult but got token 'false'")
    testSemanticError("(false) $and (false) false", "expected '$and' operator but got token 'false'; command operands must be wrapped with (...)")
    testSemanticError("(false) $and (false) $or false", "'$and' and '$or' cannot be chained")
    testSemanticError("true $and true", "'$and' expects a TestResult but got token 'true'")
    testSemanticError("(true) $and true", "'$and' expects a TestResult but got token 'true'")
    testSemanticError("true $and (true)", "'$and' expects a TestResult but got token 'true'")
    testSemanticError("(false) $or (false) $and (false)", "'$or' and '$and' cannot be chained")
    testSemanticError("(true) $or (true) $and (true)", "'$or' and '$and' cannot be chained")
    testSemanticError("(true) $and (true) $or (true)", "'$and' and '$or' cannot be chained")
    testSemanticError("(false) $or (false) $or false", "'$or' expects a TestResult but got token 'false'")

    # TODO: implement stderr error messages
    testRunError("false", "")
    testExpression("(false) $or (false)", False)
    testExpression("(false) $or (false)", False)
    testExpression("(false) $or (true)", True)
    testExpression("(true) $or ($undefined)", True)
    # TODO: implement stderr error messages
    testSemanticError("(true) $and ($missing)", "'$missing' is undefined")
    testExpression("(true) $and (false)", False)
    testExpression("(true) $and (true)", True)
    testExpression("(false) $or (false) $or (false)", False)
    testExpression("(false) $or (false) $or (true)", True)
    testExpression("(true) $and (true) $and (false)", False)
    testExpression("(true) $and (true) $and (true)", True)

    testExpression("$false $and $false", False)
    testExpression("$false $and $true", False)
    testExpression("$true $and $false", False)
    testExpression("$true $and $true", True)

    testExpression("$false $or $false", False)
    testExpression("$false $or $true", True)
    testExpression("$true $or $false", True)
    testExpression("$true $or $true", True)

    testSemanticError("$missing $and $true", "'$missing' is undefined")
    testExpression("($echo hello) $and $true", True)
    testExpression("(($echo true)) $and $true", True)
    testSemanticError("abc$def $and $true", "'$and' expects a TestResult but got a token expression")

    testExpression("((true) $and (true)) $and (true)", True)
    testExpression("((true) $and (true)) $and ((true) $and (false))", False)

    runStitchTests()

    print("test: success")

main()
