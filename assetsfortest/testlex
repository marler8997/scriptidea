#!/usr/bin/env python3
import sys
import os
from typing import List, Dict, Set, Union, Tuple, Optional, Pattern

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
REPO_DIR = os.path.dirname(SCRIPT_DIR)
sys.path.insert(0, os.path.join(REPO_DIR))

import lex

def tokenize(s):
    pos = 0
    while True:
        optional_token = lex.scan(s, pos, verify_one_match=True)
        if optional_token is None:
            break
        pattern, token_len = optional_token
        token_str = s[pos:pos+token_len]
        pos += token_len
        display_str = token_str
        if display_str == "\n":
            display_str = ""
        print("{}({})".format(pattern.kind.name, display_str))

STITCH_HEADER = "#!/usr/bin/env stitch"
        
def testFile(name: str):
    with open(name, "r") as f:
        source = f.read()
        print("--------------------------------------------------------------------------------")
        print("lexing script: '{}'".format(name))
        print("--------------------------------------------------------------------------------")
        if not source.startswith("#!/usr/bin/env stitch"):
            print("Error: this script doesn't start with '{}'".format(STITCH_HEADER))
        tokenize(source)
            
def testDir(path: str, ignore_set: Set[str]):
    for entry_base in os.listdir(path):
        if entry_base.endswith("~"):
            continue
        entry = os.path.join(path, entry_base)
        if entry_base in ignore_set:
            print("ignoring '{}'".format(entry))
            continue
        testFile(entry)
        
def main():
    print("--------------------------------------------------------------------------------")
    print("Token Patterns")
    print("--------------------------------------------------------------------------------")
    for pattern in lex.PATTERNS:
        print("{} {}".format(pattern.kind.name, pattern.re.pattern))
    print("--------------------------------------------------------------------------------")

    tokenize('@@ @# @$ @" @( @)')
    testFile(os.path.join(REPO_DIR, "stitch-tests"))
    testDir(os.path.join(REPO_DIR, "examples"), {"ldd.original_bash"})
    print("testlex: Success")

if __name__ == "__main__":
    main()
